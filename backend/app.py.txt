# backend/app.py
from flask import Flask, render_template, request, jsonify
from flask_socketio import SocketIO, join_room, leave_room, emit
import os
import uuid
from flax_processor import process_frame

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'secret_key')
socketio = SocketIO(app, cors_allowed_origins="*")

# Store active rooms and users
rooms = {}
users = {}

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/room/<room_id>')
def room(room_id):
    return render_template('room.html', room_id=room_id)

@app.route('/process', methods=['POST'])
def process_endpoint():
    try:
        data = request.get_json()
        frame_data = data.get('frame')
        filter_type = data.get('filter', 'none')
        
        if not frame_data:
            return jsonify({"error": "No frame data provided"}), 400
        
        # Process frame with Flax/JAX
        processed_frame = process_frame(frame_data, filter_type)
        
        return jsonify({
            "status": "success",
            "processed_frame": processed_frame
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@socketio.on('join')
def on_join(data):
    room_id = data['room_id']
    user_id = data['user_id']
    username = data.get('username', f'User_{str(uuid.uuid4())[:8]}')
    
    join_room(room_id)
    
    # Store user in room
    if room_id not in rooms:
        rooms[room_id] = {}
    rooms[room_id][user_id] = {'username': username}
    
    # Store user's room
    users[user_id] = room_id
    
    # Notify others in the room
    emit('user_joined', {
        'user_id': user_id,
        'username': username,
        'timestamp': data['timestamp']
    }, to=room_id, skip_sid=request.sid)
    
    # Send existing users to the new user
    existing_users = [{'user_id': uid, 'username': info['username']} 
                     for uid, info in rooms[room_id].items() if uid != user_id]
    emit('existing_users', existing_users, room=request.sid)
    
    # Update user count
    emit('user_count', {'count': len(rooms[room_id])}, to=room_id)

@socketio.on('leave')
def on_leave(data):
    user_id = data['user_id']
    room_id = users.get(user_id)
    if room_id and room_id in rooms:
        if user_id in rooms[room_id]:
            username = rooms[room_id][user_id]['username']
            del rooms[room_id][user_id]
            leave_room(room_id)
            emit('user_left', {
                'user_id': user_id,
                'username': username,
                'timestamp': data['timestamp']
            }, to=room_id)
            if len(rooms[room_id]) == 0:
                del rooms[room_id]
            else:
                # Update user count
                emit('user_count', {'count': len(rooms[room_id])}, to=room_id)
        del users[user_id]

@socketio.on('webrtc_offer')
def on_offer(data):
    target_user_id = data['target_user_id']
    emit('webrtc_offer', {
        'sdp': data['sdp'],
        'sender_user_id': data['sender_user_id']
    }, room=target_user_id)

@socketio.on('webrtc_answer')
def on_answer(data):
    target_user_id = data['target_user_id']
    emit('webrtc_answer', {
        'sdp': data['sdp'],
        'sender_user_id': data['sender_user_id']
    }, room=target_user_id)

@socketio.on('ice_candidate')
def on_ice_candidate(data):
    target_user_id = data['target_user_id']
    emit('ice_candidate', {
        'candidate': data['candidate'],
        'sender_user_id': data['sender_user_id']
    }, room=target_user_id)

@socketio.on('chat_message')
def on_chat_message(data):
    room_id = users.get(data['user_id'])
    if room_id:
        # Add username to message
        username = rooms[room_id][data['user_id']]['username']
        emit('chat_message', {
            'user_id': data['user_id'],
            'username': username,
            'message': data['message'],
            'timestamp': data['timestamp']
        }, to=room_id)

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=5000, debug=True)